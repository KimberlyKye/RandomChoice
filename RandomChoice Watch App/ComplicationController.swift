import ClockKit
import SwiftUI

class ComplicationController: NSObject, CLKComplicationDataSource {
    
    // MARK: - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    func getComplicationDescriptors(handler: @escaping ([CLKComplicationDescriptor]) -> Void) {
        let descriptors = [
            CLKComplicationDescriptor(
                identifier: "random_choice_complication",
                displayName: "Random Choice",
                supportedFamilies: [.graphicCircular, .utilitarianSmall]
            )
        ]
        handler(descriptors)
    }
    
    func getCurrentTimelineEntry(for complication: CLKComplication, withHandler handler: @escaping (CLKComplicationTimelineEntry?) -> Void) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        handler(createTimelineEntry(for: complication, date: Date()))
    }
    
    // MARK: - –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è
    
    private func createTimelineEntry(for complication: CLKComplication, date: Date) -> CLKComplicationTimelineEntry {
        let template = createTemplate(for: complication)
        return CLKComplicationTimelineEntry(date: date, complicationTemplate: template!)
    }
    
    private func createTemplate(for complication: CLKComplication) -> CLKComplicationTemplate? {
        switch complication.family {
        case .graphicCircular:
            return CLKComplicationTemplateGraphicCircularView(
                ComplicationViewCircular()
            )
        case .utilitarianSmall:
            return CLKComplicationTemplateUtilitarianSmallFlat(
                textProvider: CLKTextProvider(format: "üé≤ –í—ã–±—Ä–∞—Ç—å"),
                imageProvider: CLKImageProvider(onePieceImage: UIImage(systemName: "dice.fill")!)
            )
        default:
            return nil // –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
        }
    }
    
    // MARK: - –ü—Ä–æ—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    
    func getLocalizableSampleTemplate(for complication: CLKComplication, with handler: @escaping (CLKComplicationTemplate?) -> Void) {
        handler(createTemplate(for: complication))
    }
    
    func getPrivacyBehavior(for complication: CLKComplication, with handler: @escaping (CLKComplicationPrivacyBehavior) -> Void) {
        handler(.showOnLockScreen) // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    }
}

// MARK: - –í—å—é –¥–ª—è –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è
struct ComplicationViewCircular: View {
    var body: some View {
        ZStack {
            Circle()
                .fill(Color.blue.gradient)
            Image(systemName: "dice.fill")
                .font(.system(size: 20, weight: .bold))
                .foregroundColor(.white)
        }
    }
}
